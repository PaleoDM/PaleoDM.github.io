# Clear inputs
enemy_counter(0)
output$enemy_inputs <- renderUI({ NULL })  # Remove input fields
})
# Display the list of PCs
output$pc_list <- renderUI({
req(nrow(pc_data()) > 0)  # Ensure there are PCs to display
renderTable(pc_data())
})
# Display the list of Enemies
output$enemy_list <- renderUI({
req(nrow(enemy_data()) > 0)  # Ensure there are Enemies to display
renderTable(enemy_data())
})
# Display Party Stats
output$party_stats <- renderUI({
req(nrow(pc_data()) > 0)  # Ensure there are PCs to display
# Calculate DPR for each PC
dpr_values <- pc_data()$Damage * pc_data()$Num_Attacks
avg_dpr <- mean(dpr_values)  # Average DPR
total_dpr <- sum(dpr_values)  # Total DPR
tagList(
h5("Average HP: ", round(mean(pc_data()$HP), 1)),  # Average HP
h5("Total HP: ", sum(pc_data()$HP)),  # Total HP
h5("Average AC: ", round(mean(pc_data()$AC), 1)),  # Average AC
h5("Average DPR: ", round(avg_dpr, 1)),  # Average DPR
h5("Total DPR: ", total_dpr)  # Total DPR
)
})
# Display Enemy Stats
output$enemy_stats <- renderUI({
req(nrow(enemy_data()) > 0)  # Ensure there are Enemies to display
# Calculate DPR for each Enemy
enemy_dpr_values <- enemy_data()$Damage * enemy_data()$Num_Attacks
enemy_avg_dpr <- mean(enemy_dpr_values)  # Average DPR for enemies
enemy_total_dpr <- sum(enemy_dpr_values)  # Total DPR for enemies
tagList(
h5("Average HP: ", round(mean(enemy_data()$HP), 1)),  # Average HP for enemies
h5("Total HP: ", sum(enemy_data()$HP)),  # Total HP for enemies
h5("Average AC: ", round(mean(enemy_data()$AC), 1)),  # Average AC for enemies
h5("Average DPR: ", round(enemy_avg_dpr, 1)),  # Average DPR for enemies
h5("Total DPR: ", enemy_total_dpr)  # Total DPR for enemies
)
})
# Display Expected Outcomes
output$expected_outcomes <- renderUI({
req(nrow(enemy_data()) > 0, nrow(pc_data()) > 0)  # Ensure there are PCs and Enemies to display
total_hp_enemies <- sum(enemy_data()$HP)  # Total HP of enemies
total_dpr_party <- sum(pc_data()$Damage * pc_data()$Num_Attacks)  # Total DPR of party
rounds_to_defeat <- ceiling(total_hp_enemies / total_dpr_party)  # Calculate rounds to defeat
h5(paste("This party, dealing average damage, will defeat these enemies in", rounds_to_defeat, "rounds."))
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI
ui <- fluidPage(
# Title
titlePanel("PaleoDM's Encounter Builder"),
# Create two columns for Characters and Enemies
fluidRow(
# Column for Characters
column(6,
h3("Characters"),  # Heading for Characters section
actionButton("add_pc", "Add a PC"),  # Button to add a PC
uiOutput("pc_inputs"),  # Dynamic UI for PC inputs
actionButton("submit_pc", "Submit PC", style = "margin-top: 10px"),  # Button to submit PC
h4("Current Party"),  # Heading for Current Party section
uiOutput("pc_list"),  # Display added PCs
# Party Stats section
h4("Party Stats"),  # Heading for Party Stats section
uiOutput("party_stats")  # Display Party Stats
),
# Column for Enemies
column(6,
h3("Enemies"),  # Heading for Enemies section
actionButton("add_enemy", "Add an Enemy"),  # Button to add an enemy
uiOutput("enemy_inputs"),  # Dynamic UI for Enemy inputs
actionButton("submit_enemy", "Submit Enemy", style = "margin-top: 10px"),  # Button to submit Enemy
h4("Current Enemies"),  # Heading for Current Enemies section
uiOutput("enemy_list"),  # Display added Enemies
# Enemy Stats section
h4("Enemy Stats"),  # Heading for Enemy Stats section
uiOutput("enemy_stats")  # Display Enemy Stats
)
),
# Expected Outcomes section
h4("Expected Outcomes"),  # Heading for Expected Outcomes section
uiOutput("expected_outcomes")  # Display Expected Outcomes
)
# Define server logic
server <- function(input, output, session) {
# Track number of PCs and Enemies
pc_counter <- reactiveVal(0)
enemy_counter <- reactiveVal(0)
pc_data <- reactiveVal(data.frame(Name = character(), HP = numeric(), AC = numeric(),
Attack_Bonus = numeric(), Damage = numeric(),
Num_Attacks = numeric(), stringsAsFactors = FALSE))
enemy_data <- reactiveVal(data.frame(Name = character(), HP = numeric(), AC = numeric(),
Attack_Bonus = numeric(), Damage = numeric(),
Num_Attacks = numeric(), stringsAsFactors = FALSE))
# Observe button click to add a PC
observeEvent(input$add_pc, {
pc_counter(pc_counter() + 1)  # Increment PC counter
# Dynamically generate UI for PC inputs
output$pc_inputs <- renderUI({
pc_id <- pc_counter()
tagList(
h4(paste("PC", pc_id, "Details")),
textInput(paste0("pc_name_", pc_id), "Name:", ""),
# Defensive Stats
h5("Defensive Stats"),
numericInput(paste0("pc_hp_", pc_id), "Hit Points:", value = 25, min = 0),  # Updated HP
numericInput(paste0("pc_ac_", pc_id), "Armor Class:", value = 16, min = 0),  # Updated AC
# Offensive Stats
h5("Offensive Stats"),
numericInput(paste0("pc_ab_", pc_id), "Attack Bonus:", value = 6, min = 0),  # Updated Attack Bonus
numericInput(paste0("pc_damage_", pc_id), "Damage:", value = 7, min = 0),  # Changed to numeric input for Damage
numericInput(paste0("pc_num_attacks_", pc_id), "Number of Attacks:", value = 1, min = 1)  # Number of Attacks remains the same
)
})
})
# Observe button click to submit PC data
observeEvent(input$submit_pc, {
pc_id <- pc_counter()
new_pc <- data.frame(
Name = input[[paste0("pc_name_", pc_id)]],
HP = input[[paste0("pc_hp_", pc_id)]],
AC = input[[paste0("pc_ac_", pc_id)]],
Attack_Bonus = input[[paste0("pc_ab_", pc_id)]],
Damage = input[[paste0("pc_damage_", pc_id)]],
Num_Attacks = input[[paste0("pc_num_attacks_", pc_id)]],
stringsAsFactors = FALSE
)
# Append new PC to the data frame
pc_data(rbind(pc_data(), new_pc))
# Clear inputs
pc_counter(0)
output$pc_inputs <- renderUI({ NULL })  # Remove input fields
})
# Observe button click to add an enemy
observeEvent(input$add_enemy, {
enemy_counter(enemy_counter() + 1)  # Increment Enemy counter
# Dynamically generate UI for Enemy inputs
output$enemy_inputs <- renderUI({
enemy_id <- enemy_counter()
tagList(
h4(paste("Enemy", enemy_id, "Details")),
textInput(paste0("enemy_name_", enemy_id), "Name:", ""),
# Defensive Stats
h5("Defensive Stats"),
numericInput(paste0("enemy_hp_", enemy_id), "Hit Points:", value = 25, min = 0),
numericInput(paste0("enemy_ac_", enemy_id), "Armor Class:", value = 16, min = 0),
# Offensive Stats
h5("Offensive Stats"),
numericInput(paste0("enemy_ab_", enemy_id), "Attack Bonus:", value = 6, min = 0),
numericInput(paste0("enemy_damage_", enemy_id), "Damage:", value = 7, min = 0),
numericInput(paste0("enemy_num_attacks_", enemy_id), "Number of Attacks:", value = 1, min = 1)
)
})
})
# Observe button click to submit enemy data
observeEvent(input$submit_enemy, {
enemy_id <- enemy_counter()
new_enemy <- data.frame(
Name = input[[paste0("enemy_name_", enemy_id)]],
HP = input[[paste0("enemy_hp_", enemy_id)]],
AC = input[[paste0("enemy_ac_", enemy_id)]],
Attack_Bonus = input[[paste0("enemy_ab_", enemy_id)]],
Damage = input[[paste0("enemy_damage_", enemy_id)]],
Num_Attacks = input[[paste0("enemy_num_attacks_", enemy_id)]],
stringsAsFactors = FALSE
)
# Append new Enemy to the data frame
enemy_data(rbind(enemy_data(), new_enemy))
# Clear inputs
enemy_counter(0)
output$enemy_inputs <- renderUI({ NULL })  # Remove input fields
})
# Display the list of PCs
output$pc_list <- renderUI({
req(nrow(pc_data()) > 0)  # Ensure there are PCs to display
renderTable(pc_data())
})
# Display the list of Enemies
output$enemy_list <- renderUI({
req(nrow(enemy_data()) > 0)  # Ensure there are Enemies to display
renderTable(enemy_data())
})
# Display Party Stats
output$party_stats <- renderUI({
req(nrow(pc_data()) > 0)  # Ensure there are PCs to display
# Calculate DPR for each PC
dpr_values <- pc_data()$Damage * pc_data()$Num_Attacks
avg_dpr <- mean(dpr_values)  # Average DPR
total_dpr <- sum(dpr_values)  # Total DPR
tagList(
h5("Average HP: ", round(mean(pc_data()$HP), 1)),  # Average HP
h5("Total HP: ", sum(pc_data()$HP)),  # Total HP
h5("Average AC: ", round(mean(pc_data()$AC), 1)),  # Average AC
h5("Average DPR: ", round(avg_dpr, 1)),  # Average DPR
h5("Total DPR: ", total_dpr)  # Total DPR
)
})
# Display Enemy Stats
output$enemy_stats <- renderUI({
req(nrow(enemy_data()) > 0)  # Ensure there are Enemies to display
# Calculate DPR for each Enemy
enemy_dpr_values <- enemy_data()$Damage * enemy_data()$Num_Attacks
enemy_avg_dpr <- mean(enemy_dpr_values)  # Average DPR for enemies
enemy_total_dpr <- sum(enemy_dpr_values)  # Total DPR for enemies
tagList(
h5("Average HP: ", round(mean(enemy_data()$HP), 1)),  # Average HP for enemies
h5("Total HP: ", sum(enemy_data()$HP)),  # Total HP for enemies
h5("Average AC: ", round(mean(enemy_data()$AC), 1)),  # Average AC for enemies
h5("Average DPR: ", round(enemy_avg_dpr, 1)),  # Average DPR for enemies
h5("Total DPR: ", enemy_total_dpr)  # Total DPR for enemies
)
})
# Display Expected Outcomes
output$expected_outcomes <- renderUI({
req(nrow(enemy_data()) > 0, nrow(pc_data()) > 0)  # Ensure there are PCs and Enemies to display
total_hp_enemies <- sum(enemy_data()$HP)  # Total HP of enemies
total_dpr_party <- sum(pc_data()$Damage * pc_data()$Num_Attacks)  # Total DPR of party
# Calculate rounds to defeat and round to 1 decimal place
rounds_to_defeat <- round(total_hp_enemies / total_dpr_party, 1)
h5(paste("This party, dealing average damage, will defeat these enemies in", rounds_to_defeat, "rounds."))
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI
ui <- fluidPage(
# Title
titlePanel("PaleoDM's Encounter Builder"),
# Create two columns for Characters and Enemies
fluidRow(
# Column for Characters
column(6,
h3("Characters"),  # Heading for Characters section
actionButton("add_pc", "Add a PC"),  # Button to add a PC
uiOutput("pc_inputs"),  # Dynamic UI for PC inputs
actionButton("submit_pc", "Submit PC", style = "margin-top: 10px"),  # Button to submit PC
h4("Current Party"),  # Heading for Current Party section
uiOutput("pc_list"),  # Display added PCs
# Party Stats section
h4("Party Stats"),  # Heading for Party Stats section
uiOutput("party_stats")  # Display Party Stats
),
# Column for Enemies
column(6,
h3("Enemies"),  # Heading for Enemies section
actionButton("add_enemy", "Add an Enemy"),  # Button to add an enemy
uiOutput("enemy_inputs"),  # Dynamic UI for Enemy inputs
actionButton("submit_enemy", "Submit Enemy", style = "margin-top: 10px"),  # Button to submit Enemy
h4("Current Enemies"),  # Heading for Current Enemies section
uiOutput("enemy_list"),  # Display added Enemies
# Enemy Stats section
h4("Enemy Stats"),  # Heading for Enemy Stats section
uiOutput("enemy_stats")  # Display Enemy Stats
)
),
# Expected Outcomes section
h4("Expected Outcomes"),  # Heading for Expected Outcomes section
uiOutput("expected_outcomes")  # Display Expected Outcomes
)
# Define server logic
server <- function(input, output, session) {
# Track number of PCs and Enemies
pc_counter <- reactiveVal(0)
enemy_counter <- reactiveVal(0)
pc_data <- reactiveVal(data.frame(Name = character(), HP = numeric(), AC = numeric(),
Attack_Bonus = numeric(), Damage = numeric(),
Num_Attacks = numeric(), stringsAsFactors = FALSE))
enemy_data <- reactiveVal(data.frame(Name = character(), HP = numeric(), AC = numeric(),
Attack_Bonus = numeric(), Damage = numeric(),
Num_Attacks = numeric(), stringsAsFactors = FALSE))
# Observe button click to add a PC
observeEvent(input$add_pc, {
pc_counter(pc_counter() + 1)  # Increment PC counter
# Dynamically generate UI for PC inputs
output$pc_inputs <- renderUI({
pc_id <- pc_counter()
tagList(
h4(paste("PC", pc_id, "Details")),
textInput(paste0("pc_name_", pc_id), "Name:", ""),
# Defensive Stats
h5("Defensive Stats"),
numericInput(paste0("pc_hp_", pc_id), "Hit Points:", value = 25, min = 0),  # Updated HP
numericInput(paste0("pc_ac_", pc_id), "Armor Class:", value = 16, min = 0),  # Updated AC
# Offensive Stats
h5("Offensive Stats"),
numericInput(paste0("pc_ab_", pc_id), "Attack Bonus:", value = 6, min = 0),  # Updated Attack Bonus
numericInput(paste0("pc_damage_", pc_id), "Damage:", value = 7, min = 0),  # Changed to numeric input for Damage
numericInput(paste0("pc_num_attacks_", pc_id), "Number of Attacks:", value = 1, min = 1)  # Number of Attacks remains the same
)
})
})
# Observe button click to submit PC data
observeEvent(input$submit_pc, {
pc_id <- pc_counter()
new_pc <- data.frame(
Name = input[[paste0("pc_name_", pc_id)]],
HP = input[[paste0("pc_hp_", pc_id)]],
AC = input[[paste0("pc_ac_", pc_id)]],
Attack_Bonus = input[[paste0("pc_ab_", pc_id)]],
Damage = input[[paste0("pc_damage_", pc_id)]],
Num_Attacks = input[[paste0("pc_num_attacks_", pc_id)]],
stringsAsFactors = FALSE
)
# Append new PC to the data frame
pc_data(rbind(pc_data(), new_pc))
# Clear inputs
pc_counter(0)
output$pc_inputs <- renderUI({ NULL })  # Remove input fields
})
# Observe button click to add an enemy
observeEvent(input$add_enemy, {
enemy_counter(enemy_counter() + 1)  # Increment Enemy counter
# Dynamically generate UI for Enemy inputs
output$enemy_inputs <- renderUI({
enemy_id <- enemy_counter()
tagList(
h4(paste("Enemy", enemy_id, "Details")),
textInput(paste0("enemy_name_", enemy_id), "Name:", ""),
# Defensive Stats
h5("Defensive Stats"),
numericInput(paste0("enemy_hp_", enemy_id), "Hit Points:", value = 25, min = 0),
numericInput(paste0("enemy_ac_", enemy_id), "Armor Class:", value = 16, min = 0),
# Offensive Stats
h5("Offensive Stats"),
numericInput(paste0("enemy_ab_", enemy_id), "Attack Bonus:", value = 6, min = 0),
numericInput(paste0("enemy_damage_", enemy_id), "Damage:", value = 7, min = 0),
numericInput(paste0("enemy_num_attacks_", enemy_id), "Number of Attacks:", value = 1, min = 1)
)
})
})
# Observe button click to submit enemy data
observeEvent(input$submit_enemy, {
enemy_id <- enemy_counter()
new_enemy <- data.frame(
Name = input[[paste0("enemy_name_", enemy_id)]],
HP = input[[paste0("enemy_hp_", enemy_id)]],
AC = input[[paste0("enemy_ac_", enemy_id)]],
Attack_Bonus = input[[paste0("enemy_ab_", enemy_id)]],
Damage = input[[paste0("enemy_damage_", enemy_id)]],
Num_Attacks = input[[paste0("enemy_num_attacks_", enemy_id)]],
stringsAsFactors = FALSE
)
# Append new Enemy to the data frame
enemy_data(rbind(enemy_data(), new_enemy))
# Clear inputs
enemy_counter(0)
output$enemy_inputs <- renderUI({ NULL })  # Remove input fields
})
# Display the list of PCs
output$pc_list <- renderUI({
req(nrow(pc_data()) > 0)  # Ensure there are PCs to display
renderTable(pc_data())
})
# Display the list of Enemies
output$enemy_list <- renderUI({
req(nrow(enemy_data()) > 0)  # Ensure there are Enemies to display
renderTable(enemy_data())
})
# Display Party Stats
output$party_stats <- renderUI({
req(nrow(pc_data()) > 0)  # Ensure there are PCs to display
# Calculate DPR for each PC
dpr_values <- pc_data()$Damage * pc_data()$Num_Attacks
avg_dpr <- mean(dpr_values)  # Average DPR
total_dpr <- sum(dpr_values)  # Total DPR
tagList(
h5("Average HP: ", round(mean(pc_data()$HP), 1)),  # Average HP
h5("Total HP: ", sum(pc_data()$HP)),  # Total HP
h5("Average AC: ", round(mean(pc_data()$AC), 1)),  # Average AC
h5("Average DPR: ", round(avg_dpr, 1)),  # Average DPR
h5("Total DPR: ", total_dpr)  # Total DPR
)
})
# Display Enemy Stats
output$enemy_stats <- renderUI({
req(nrow(enemy_data()) > 0)  # Ensure there are Enemies to display
# Calculate DPR for each Enemy
enemy_dpr_values <- enemy_data()$Damage * enemy_data()$Num_Attacks
enemy_avg_dpr <- mean(enemy_dpr_values)  # Average DPR for enemies
enemy_total_dpr <- sum(enemy_dpr_values)  # Total DPR for enemies
tagList(
h5("Average HP: ", round(mean(enemy_data()$HP), 1)),  # Average HP for enemies
h5("Total HP: ", sum(enemy_data()$HP)),  # Total HP for enemies
h5("Average AC: ", round(mean(enemy_data()$AC), 1)),  # Average AC for enemies
h5("Average DPR: ", round(enemy_avg_dpr, 1)),  # Average DPR for enemies
h5("Total DPR: ", enemy_total_dpr)  # Total DPR for enemies
)
})
# Display Expected Outcomes
output$expected_outcomes <- renderUI({
req(nrow(enemy_data()) > 0, nrow(pc_data()) > 0)  # Ensure there are PCs and Enemies to display
total_hp_enemies <- sum(enemy_data()$HP)  # Total HP of enemies
total_dpr_party <- sum(pc_data()$Damage * pc_data()$Num_Attacks)  # Total DPR of party
# Calculate rounds for party to defeat enemies and round to 1 decimal place
rounds_to_defeat_party <- round(total_hp_enemies / total_dpr_party, 1)
# Calculate total HP of the party
total_hp_party <- sum(pc_data()$HP)  # Total HP of the party
# Calculate total DPR for enemies
total_dpr_enemies <- sum(enemy_data()$Damage * enemy_data()$Num_Attacks)  # Total DPR of enemies
# Calculate rounds for enemies to defeat party and round to 1 decimal place
rounds_to_defeat_party <- round(total_hp_party / total_dpr_enemies, 1)
tagList(
h5(paste("This party, dealing average damage, will defeat these enemies in", rounds_to_defeat_party, "rounds.")),
h5(paste("These enemies, dealing average damage, will defeat this party in", rounds_to_defeat_party, "rounds."))
)
})
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
version
library(geomorph)
version
install.packages("TinyTex")
library(tinytex)
quarto install tinytex
library(tinytex)
install.packages("tinytex")
install.packages("tinytex")
library(tinytex)
tinytex::tinytex_root()
Sys.which("xelatex")
tinytex::uninstall_tinytex()
tinytex::install_tinytex()
tinytex::tinytex_root()
Sys.which("xelatex")
Sys.which("xelatex")
tinytex::tinytex_root()
tinytex::tinytex_root()
Sys.which("xelatex")
Sys.which("xelatex")
tinytex::tlmgr_path()
Sys.which("xelatex")
install.packages("blogdown")
setwd("D:/Dropbox/Work/Data Science Portfolio/Github Website/taichuandoaddct.github.io")
file.rename(list.files(pattern = "\\.Rmd$"),
sub("\\.Rmd$", ".qmd", list.files(pattern = "\\.Rmd$")))
# Get list of .qmd files
qmd_files <- list.files(pattern = "\\.qmd$")
# Loop through each file and add YAML if missing
for (file in qmd_files) {
content <- readLines(file)
# If file does not already have YAML, add it
if (!grepl("---", content[1])) {
new_content <- c(
"---",
paste0("title: \"", tools::file_path_sans_ext(basename(file)), "\""),
"format: html",
"---",
"",
content
)
writeLines(new_content, file)
}
}
# Get list of all .qmd files
qmd_files <- list.files(pattern = "\\.qmd$")
# Loop through each file
for (file in qmd_files) {
content <- readLines(file)
# Detect incorrect YAML and fix it
if (length(content) >= 3 && grepl("output:", content[2])) {
new_content <- c(
"---",
paste0("title: \"", tools::file_path_sans_ext(basename(file)), "\""),
"format: html",
"---",
"",
content[-(1:3)] # Remove the incorrect YAML lines
)
writeLines(new_content, file)
}
}
# Get list of all .qmd files
qmd_files <- list.files(pattern = "\\.qmd$")
# Loop through each file
for (file in qmd_files) {
content <- readLines(file, warn = FALSE)  # Read file, suppressing warnings
# If last line is not empty, add a newline
if (length(content) > 0 && content[length(content)] != "") {
content <- c(content, "")  # Append a blank line
writeLines(content, file)
}
}
# Get list of all .qmd files
qmd_files <- list.files(pattern = "\\.qmd$")
# Loop through each file
for (file in qmd_files) {
content <- readLines(file)
# Detect incorrect YAML and fix it
if (length(content) >= 3 && grepl("output:", content[2])) {
new_content <- c(
"---",
paste0("title: \"", tools::file_path_sans_ext(basename(file)), "\""),
"format: html",
"---",
"",
content[-(1:3)] # Remove the incorrect YAML lines
)
writeLines(new_content, file)
}
}
quarto clean
